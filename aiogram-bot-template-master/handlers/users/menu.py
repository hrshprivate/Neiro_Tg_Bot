import io

from aiogram import types
from aiogram.dispatcher import FSMContext
from translate import Translator

from loader import dp, bot
from aiogram.types import Message, ReplyKeyboardMarkup
from keyboards.default import menu
from aiogram.dispatcher.filters import Command, Text

from states.test import Test, Answer
from utils.db_api.sqlite import add_command
from utils.misc.main import compare_faces, ff


@dp.message_handler(Command("menu"))
async def show_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é", reply_markup=menu)


@dp.message_handler(Text(equals=["–û —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ ‚ÑπÔ∏è"]))
async def get_item(message: Message):

    await message.answer(f"–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ‚¨áÔ∏è\n"
                         f"1Ô∏è‚É£ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π .jpg —Ñ–æ—Ä–º–∞—Ç–∞,  \n"
                         f"2Ô∏è‚É£ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å–∂–∏–º–∞—Ç—å –Ω–µ –Ω–∞–¥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, \n"
                         f"3Ô∏è‚É£ –ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–ª, \n"
                         f"üî• /items - –ó–∞–ø—É—Å–∫ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", reply_markup=ReplyKeyboardMarkup())


@dp.message_handler(Text(equals=["–°–≤—è–∑—å ‚úîÔ∏è"]))
async def get_answer(message: Message):
    await message.answer(f"–î–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, "
                         f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: /connect", reply_markup=ReplyKeyboardMarkup())


@dp.message_handler(Text(equals=["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ üòµ"]), state=None)
async def get_answer(message: Message):
    await message.answer("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
                         "–ó–∞—è–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 95%+. \n\n"
                         "–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ü –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
    await Test.Q1.set()


@dp.message_handler(Command("cancel"), state="*")
@dp.message_handler(Text(equals='cancel', ignore_case=True), state="*")
async def cancel_data(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('OK')


@dp.message_handler(content_types=['photo'], state=Test.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["Q1"] = message.photo[0].file_id
    await message.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
    await Test.next()


@dp.message_handler(content_types=['photo'], state=Test.Q2)
async def answer_q2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answer_1 = await bot.get_file(data.get("Q1"))
    downloaded_file_first = await bot.download_file(answer_1.file_path)
    async with state.proxy() as data:
        data["Q2"] = message.photo[0].file_id
    answer_2 = await bot.get_file(message.photo[0].file_id)
    downloaded_file_second = await bot.download_file(answer_2.file_path)
    result = compare_faces(downloaded_file_first, downloaded_file_second)
    await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–≤–µ–Ω - {result}')
    await add_command(state)
    await state.finish()

#######################################################################


@dp.message_handler(Text(equals=["–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ üñ§"]), state=None)
async def get_answer(message: Message):
    await message.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ.\n"
                         "–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç. \n\n"
                         "–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n"
                         "–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ª–∏—Ü–æ!\n"
                         "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º(–±–µ–∑ —Å–∂–∞—Ç–∏—è)")
    await Answer.photo.set()


@dp.message_handler(content_types=['document'], state=Answer.photo)
async def answer_q1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.document.file_id
    photo_name = message.document.file_id
    downloaded_file = await bot.download_file_by_id(photo_name)
    file = "123.jpg"
    with open(file, "wb") as f:
        f.write(downloaded_file.read())
    result = ff(file)

    translator = Translator(to_lang="Russian")
    await message.answer(f"–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—É: \n"
                         f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç - {result['age']} \n"
                         f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ä–∞—Å–∞ - {translator.translate(result['dominant_race'])} \n"
                         f"–ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ–ª - {translator.translate(result['gender'])} \n"
                         f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —ç–º–æ—Ü–∏—è - {translator.translate(result['dominant_emotion'])} \n")
    await state.finish()






# @dp.message_handler(Text(equals=["–û —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ ‚ÑπÔ∏è", "–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ", "–ü–æ–∏—Å–∫ –ø–æ –ª–∏—Ü—É"]))




